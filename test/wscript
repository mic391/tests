#! /usr/bin/env python

def options(opt):
  opt.load('waf_unit_test')

def configure(conf):
  conf.load('waf_unit_test')
  conf.check_cxx(lib="gtest", mandatory=True, uselib_store='GTEST')
  conf.check_cxx(lib="gtest_main", mandatory=True, uselib_store='GTEST_MAIN')
  conf.check_cxx(lib="gmock", use='GTEST', mandatory=False, uselib_store='GMOCK')
  conf.check_cxx(lib="pthread", mandatory=True, uselib_store='PTHREAD')
  conf.check_cxx(header_name="gtest/gtest.h", mandatory=True)
  conf.check_cxx(header_name="gmock/gmock.h", mandatory=False)
  conf.check_cxx(header_name="array", mandatory=False)
  conf.check_cxx(header_name="memory", mandatory=True)
  conf.check_cxx(header_name="boost/range/iterator_range.hpp", mandatory=True)

def build(bld):
  bld.program(
    features  = 'cxxprogram test',
    includes  = [bld.srcnode.find_dir('inc'), bld.path.abspath()],
    source    = bld.path.ant_glob('*.cpp'),
    target    = 'TEST',
    cxxflags  = '-g -O0 -Wall',
    use       = 'ART GTEST GTEST_MAIN PTHREAD'
  )
  def summary(test):
    from waflib import Logs
    lst=getattr(test,'utest_results',[])
    if lst:
      for(f,code,out,err)in lst:
        Logs.pprint('BLACK','    %s'%out.decode('ascii'))
      Logs.pprint('CYAN','execution summary')
      total=len(lst)
      tfail=len([x for x in lst if x[1]])
      Logs.pprint('CYAN','  tests that pass %d/%d'%(total-tfail,total))
      if tfail != 0:
        Logs.pprint('RED','  tests that fail %d/%d'%(tfail,total))
        from waflib.Errors import WafError
        raise WafError("test fail")
  bld.add_post_fun(summary)

